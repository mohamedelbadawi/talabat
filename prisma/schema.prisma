generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GeneralStatus {
  Active
  InActive
}

enum OrderStatus {
  pending
  cancelled
  completed
}

enum Role {
  Admin
  User
}

model User {
  id            String        @id @default(uuid())
  name          String
  username      String        @unique
  email         String        @unique
  status        GeneralStatus @default(Active)
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?
  passwordToken String?
  tokenVerfied  Boolean       @default(false)
  tokenExpireAt String?
  Order         Order[]
  Restaurant    Restaurant[]
  role          Role          @default(User)
  Meal          Meal[]
  Cart          Cart[]
}

model Restaurant {
  id          String        @id @default(uuid())
  name        String
  description String?
  location    String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  status      GeneralStatus @default(InActive)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  Meal        Meal[]
}

model Meal {
  id           String        @id @default(uuid())
  name         String
  description  String?
  price        Decimal
  status       GeneralStatus @default(Active)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  resturant    Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrdersMeals  OrderMeal[]
  CartItem     CartItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  total     Decimal    @default(0)
  CartItems CartItem[]
}

model CartItem {
  id       String @id @default(uuid())
  cartId   String
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  mealId   String
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  quantity Int

  @@unique([mealId, cartId])
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  totalPrice  Decimal
  location    String      @db.VarChar(200)
  notes       String?     @db.VarChar(255)
  phoneNumber String
  status      OrderStatus @default(pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  OrdersMeals OrderMeal[]
}

model OrderMeal {
  meal     Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId   String
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  quantity Decimal

  @@id([orderId, mealId])
}
